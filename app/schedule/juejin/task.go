package juejin

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/go-redis/redis/v8"
	"github.com/goccy/go-json"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	"io/ioutil"
	"net/http"
	"spider_hot/app/model"
	"spider_hot/app/tools"
)

const (
	juejinHotKey      = "juejin_hot"
	juejinHotDataKey  = "juejin_hot_data"
	juejinRefreshRate = 24 * time.Hour // 刷新率为24小时
)

func init() {
	tools.LoadConfig()
}

// Run 启动定时任务
func Run() {
	interval := viper.GetDuration("interval")
	ticker := time.NewTicker(interval)
	defer func() {
		ticker.Stop()
	}()

	for {
		select {
		case <-ticker.C:
			GetInfo(nil)
		}
	}
}

// Do 手动触发获取信息
func Do() {
	GetInfo(nil)
}

// GetInfo 获取并处理信息
func GetInfo(c *gin.Context) {
	client := &http.Client{}
	request, err := http.NewRequest("GET", viper.GetString("hot_api.juejin"), nil)
	if err != nil {
		logrus.Error("juejin:创建http请求失败err:", err)
		return
	}
	request.Header.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.76")
	request.Header.Add("Cookie", "your_cookie_here")

	response, err := client.Do(request)
	if err != nil {
		logrus.Error("juejin:http请求失败err:", err)
		return
	}
	defer response.Body.Close()

	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		logrus.Error("juejin:读取响应信息失败err:", err)
		return
	}

	var AutoGenerated AutoGenerated
	err = json.Unmarshal(body, &AutoGenerated)
	if err != nil {
		logrus.Error("juejin:解码ummarshal失败err:", err)
		return
	}

	realtimeData := AutoGenerated.Data
	now := time.Now().Unix()
	var data []*Juejin
	var hotinfoStr string

	for _, list := range realtimeData {
		url := fmt.Sprintf("http://juejin.cn/post/%s", list.Content.ContentID)
		tmp := &Juejin{
			Hot:         int64(list.ContentCounter.HotRank),
			UpdateVer:   now,
			Title:       list.Content.Title,
			Url:         url,
			AuthorId:    list.Author.UserID,
			AuthorName:  list.Author.Name,
			CreatedTime: time.Now(),
			UpdatedTime: time.Now(),
		}

		data = append(data, tmp)
		hotinfoStr += list.Content.Title + url // 增加空格
	}

	hashStr := tools.Sha256Hash(hotinfoStr)

	// 从 Redis 中获取当前保存的 hashStr
	value, err := model.RedisClient.Get(context.Background(), juejinHotKey).Result()
	if err == redis.Nil {
		// Redis 中不存在数据，第一次设置
		if err := saveToRedisAndDB(hashStr, data); err != nil {
			logrus.Error("juejin:保存数据到Redis和数据库失败:", err)
			return
		}
	} else if err != nil {
		logrus.Error("juejin:从redis获取数据失败err:", err)
	} else {
		// Redis 中已存在数据，比较 hashStr
		if hashStr != value {
			// 数据发生变化，更新 Redis 和数据库
			if err := saveToRedisAndDB(hashStr, data); err != nil {
				logrus.Error("juejin:更新数据到Redis和数据库失败:", err)
				return
			}
		} else {
			// 数据未发生变化，更新最新记录的版本号和时间
			if err := updateExistingRecords(now); err != nil {
				logrus.Error("juejin:更新最新记录的版本号和时间失败:", err)
				return
			}
		}
	}
	// 构建返回给前端的部分数据
	var partialData []model.HtmlData
	for _, item := range data {
		partialData = append(partialData, model.HtmlData{
			Title: item.Title,
			Url:   item.Url,
			Hot:   strconv.FormatInt(item.Hot, 10),
		})
	}

	// 返回部分数据给前端
	c.JSON(http.StatusOK, tools.ECode{
		Message: "",
		Data:    partialData,
	})
}

// saveToRedisAndDB 保存数据到 Redis 和数据库
func saveToRedisAndDB(hashStr string, data []*Juejin) error {
	ctx := context.Background()
	tx := model.Conn.Begin()

	// 事务开始
	if err := tx.Error; err != nil {
		return fmt.Errorf("开启事务失败: %v", err)
	}

	// 更新 Redis 中的 hashStr
	if err := model.RedisClient.Set(ctx, juejinHotKey, hashStr, 0).Err(); err != nil {
		tx.Rollback()
		return fmt.Errorf("将hashstr数据设置进Redis失败: %v", err)
	}

	// 保存数据到数据库
	if err := tx.Create(data).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("将数据保存到数据库失败: %v", err)
	}

	// 提交事务
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("提交事务失败: %v", err)
	}

	// 存储最新的热搜数据到 Redis
	hotDataJson, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("将热搜数据转换为JSON格式失败: %v", err)
	}

	if err := model.RedisClient.Set(ctx, juejinHotDataKey, hotDataJson, juejinRefreshRate).Err(); err != nil {
		return fmt.Errorf("将最新热搜数据写入Redis失败: %v", err)
	}

	return nil
}

// updateExistingRecords 更新已有记录的版本号和时间
func updateExistingRecords(now int64) error {
	var maxUpdateVer int64
	var updateSlice []*Juejin

	// 获取最大更新版本号
	if err := model.Conn.Model(&Juejin{}).Select("MAX(update_ver) AS max_update_ver").Scan(&maxUpdateVer).Error; err != nil {
		return fmt.Errorf("获取最大更新版本号失败: %v", err)
	}

	// 查找具有最大更新版本号的记录
	if err := model.Conn.Where("update_ver = ?", maxUpdateVer).Find(&updateSlice).Error; err != nil {
		return fmt.Errorf("获取需要更新的记录失败: %v", err)
	}

	// 更新记录的版本号和更新时间
	for _, record := range updateSlice {
		record.UpdateVer = now
		record.UpdatedTime = time.Now()
		if err := model.Conn.Save(record).Error; err != nil {
			return fmt.Errorf("更新记录失败: %v", err)
		}
	}

	return nil
}

// Refresh 从 Redis 中刷新获取最新的热搜数据
func Refresh() ([]*Juejin, error) {
	var juejinList []*Juejin

	// 从 Redis 中获取最新的热搜数据
	hotDataJson, err := model.RedisClient.Get(context.Background(), juejinHotDataKey).Result()
	if err == redis.Nil {
		return juejinList, fmt.Errorf("Redis 中没有找到数据")
	} else if err != nil {
		return juejinList, fmt.Errorf("从 Redis 获取数据失败: %v", err)
	}

	// 反序列化 JSON 数据为 Juejin 列表
	if err := json.Unmarshal([]byte(hotDataJson), &juejinList); err != nil {
		return juejinList, fmt.Errorf("反序列化 JSON 数据失败: %v", err)
	}

	// 打印查询结果
	fmt.Printf("Refreshed data from Redis:\n")
	for _, item := range juejinList {
		fmt.Printf("Title: %s, Url: %s, Hot: %d\n", item.Title, item.Url, item.Hot)
	}
	return juejinList, nil
}
